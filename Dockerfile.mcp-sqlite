# Dockerfile for mcp-sqlite MCP server
FROM node:20-alpine

WORKDIR /app

# Install required system packages
RUN apk add --no-cache \
    sqlite \
    python3 \
    make \
    g++ \
    wget \
    && rm -rf /var/cache/apk/*

# Create package.json
RUN echo '{ \
  "name": "mcp-sqlite-server", \
  "version": "1.0.0", \
  "main": "server.js", \
  "dependencies": { \
    "express": "^4.18.2", \
    "sqlite3": "^5.1.6", \
    "cors": "^2.8.5" \
  } \
}' > package.json

# Install dependencies
RUN npm install

# Create the SQLite MCP server
RUN echo 'const express = require("express"); \
const sqlite3 = require("sqlite3").verbose(); \
const cors = require("cors"); \
const path = require("path"); \
\
const app = express(); \
const port = 3000; \
\
app.use(cors()); \
app.use(express.json()); \
\
const dbPath = "/data/mcp.db"; \
const db = new sqlite3.Database(dbPath); \
\
db.serialize(() => { \
  db.run(`CREATE TABLE IF NOT EXISTS logs ( \
    id INTEGER PRIMARY KEY AUTOINCREMENT, \
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, \
    level TEXT, \
    message TEXT, \
    source TEXT \
  )`); \
  \
  db.run(`CREATE TABLE IF NOT EXISTS sessions ( \
    id TEXT PRIMARY KEY, \
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, \
    data TEXT \
  )`); \
}); \
\
app.get("/health", (req, res) => { \
  res.json({ status: "healthy", service: "mcp-sqlite" }); \
}); \
\
app.post("/query", (req, res) => { \
  const { sql, params = [] } = req.body; \
  \
  if (!sql) { \
    return res.status(400).json({ error: "SQL query is required" }); \
  } \
  \
  const allowedOperations = /^(SELECT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER)/i; \
  if (!allowedOperations.test(sql.trim())) { \
    return res.status(400).json({ error: "Invalid SQL operation" }); \
  } \
  \
  if (sql.trim().toUpperCase().startsWith("SELECT")) { \
    db.all(sql, params, (err, rows) => { \
      if (err) { \
        res.status(500).json({ error: err.message }); \
      } else { \
        res.json({ \
          columns: rows.length > 0 ? Object.keys(rows[0]) : [], \
          rows: rows.map(row => Object.values(row)), \
          row_count: rows.length \
        }); \
      } \
    }); \
  } else { \
    db.run(sql, params, function(err) { \
      if (err) { \
        res.status(500).json({ error: err.message }); \
      } else { \
        res.json({ \
          changes: this.changes, \
          lastID: this.lastID, \
          message: "Query executed successfully" \
        }); \
      } \
    }); \
  } \
}); \
\
app.get("/tables", (req, res) => { \
  const sql = "SELECT name FROM sqlite_master WHERE type=\"table\""; \
  db.all(sql, [], (err, rows) => { \
    if (err) { \
      res.status(500).json({ error: err.message }); \
    } else { \
      res.json({ tables: rows.map(row => row.name) }); \
    } \
  }); \
}); \
\
app.listen(port, "0.0.0.0", () => { \
  console.log(`MCP SQLite server running on port ${port}`); \
}); \
\
process.on("SIGTERM", () => { \
  db.close((err) => { \
    if (err) { \
      console.error(err.message); \
    } \
    console.log("Database connection closed."); \
    process.exit(0); \
  }); \
});' > server.js

# Create data directory
RUN mkdir -p /data

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1

CMD ["node", "server.js"]
